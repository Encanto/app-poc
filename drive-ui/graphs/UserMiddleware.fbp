# @runtime noflo-browser
# @icon user-circle
INPORT=Dispatch.IN:IN
OUTPORT=Dispatch.PASS:PASS
OUTPORT=NewActions.OUT:NEW

'application:url,user:login,user:logout,user:update' -> ROUTES Dispatch(ui/DispatchAction)

# New actions generated by this middleware
'user:info' -> ACTION UserInfoAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'user:error' -> ACTION UserErrorAction(ui/SetAction) OUT -> IN NewActions
'application:redirect' -> ACTION ApplicationRedirectAction(ui/SetAction) OUT -> IN NewActions
'flowhub:runtimes:fetch' -> ACTION RegistryRuntimesFetch(ui/SetAction) OUT -> IN NewActions
'user:logout' -> ACTION UserLogoutAction(ui/SetAction) OUT -> IN NewActions

# Start action handling
# - Check if we have an authorization code in URL and exchange for token
# - Load user from localStorage
Dispatch HANDLE[0] -> IN CheckQuery(ui/CheckTokenGrant)
# If we have an OAuth grant code, we need to try exchanging it
CheckQuery CODE -> CODE ExchangeToken(ui/ExchangeGrantToken)
CheckQuery ERROR -> IN UserErrorAction
ExchangeToken TOKEN -> TOKEN GetRemoteUser(ui/GetRemoteUser)
ExchangeToken ERROR -> IN UserErrorAction
GetRemoteUser USER -> USER StoreUser(ui/StoreUser)
GetRemoteUser ERROR -> IN UserErrorAction
StoreUser USER -> IN UserInfoAction
# Fetch runtimes when user changes
StoreUser USER -> IN RegistryRuntimesFetch
# In some cases we need to clean up URL after user has been persisted by redirecting
StoreUser REDIRECT -> IN ApplicationRedirectAction

# No grant code in URL, try to load local user data
CheckQuery PASS -> START LoadUser(ui/LoadUserData)
# Send cached user information out immediately
LoadUser USER -> IN UserInfoAction
# Refresh user information from remote source
LoadUser USER -> IN RefreshUser(ui/RefreshRemoteUser)
# If user data hasn't changed pass as-is
RefreshUser PASS -> IN UserInfoAction
# If user data changed, update cache
RefreshUser UPDATED -> USER StoreUser
# If local user data was invalid, log out
RefreshUser INVALID -> IN UserLogoutAction
# Error handling
LoadUser ERROR -> IN UserErrorAction
RefreshUser ERROR -> IN UserErrorAction

# Login action handling
Dispatch HANDLE[1] -> IN Login(ui/LoginOAuth)
# With Chrome app we get a new URL to check for codes
Login CODEURL -> IN CheckQuery
# With webapp we perform a URL redirect
Login REDIRECT -> IN ApplicationRedirectAction
Login ERROR -> IN UserErrorAction

# Logout action handling
Dispatch HANDLE[2] -> CLEAR Reset(ui/ClearUserData)
Reset USER -> IN UserInfoAction

# User preference updating
'user' -> KEYS GetUserStateForUpdate(ui/GetActionValues)
Dispatch HANDLE[3] -> IN GetUserStateForUpdate
GetUserStateForUpdate VALUES[0] -> USER StoreUserPreferences(ui/StoreUserPreferences)
GetUserStateForUpdate OUT -> IN StoreUserPreferences
StoreUserPreferences OUT -> IN UserInfoAction
StoreUserPreferences ERROR -> IN UserErrorAction
